namespace = nonbinary_leaders

# flag mod as active
event = {
	id = nonbinary_leaders.13
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	trigger = {
		NOT = { has_global_flag = nonbinary_leaders_installed }
	}
	immediate = {
		set_global_flag = nonbinary_leaders_installed
	}
}

# flag mod as active (in case the mod is added after game start)
country_event = {
	id = nonbinary_leaders.14
	hide_window = yes
	fire_only_once = yes
	trigger = {
		NOT = { has_global_flag = nonbinary_leaders_installed }
	}
	immediate = {
		set_global_flag = nonbinary_leaders_installed
	}
}

# log info about every owned and pool leader
country_event = {
	id = nonbinary_leaders.1000
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = "Owned Leaders"
		every_owned_leader = {
			print_leader_info = yes
		}

		log = "Pool Leaders"
		every_pool_leader = {
			print_leader_info = yes
		}
	}
}

# THIS = country
# FROM = leader
# triggered by on_leader_spawned
country_event = {
	id = nonbinary_leaders.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = default # only default countries seem to have leader pools
		# only triggers in presence of the flag or after at least 1 day has passed in order to avoid changing the gender identity of starting rulers
		OR = {
			has_country_flag = nonbinary_leaders_game_begun
			days_passed > 0
		}
		exists = FROM
		FROM = {
			NOT = { has_leader_flag = gender_reselected }
			OR = {
				uses_gender_species = yes
				is_custom_species_class = yes # custom species classes probably don't explicitly define "gender = no" and yes is the default, so assume yes
			}
		}
	}
	immediate = {
		FROM = { save_event_target_as = leader_to_pseudo_clone }
		# 
		log_if_enabled = { MESSAGE = "\"nonbinary_leaders.1 detected spawned leader \\[leader_to_pseudo_clone.GetTitle] \\[leader_to_pseudo_clone.GetName] of gendered species class \\[leader_to_pseudo_clone.GetSpeciesClassOrCustom]...\"" }
		# for now, only change leaders of known leader_classes when they spawn into the leader pool
		if = {
			limit = {
				FROM = {
					OR = {
						leader_class = ruler
						leader_class = governor
						leader_class = scientist
						leader_class = admiral
						leader_class = general
						leader_class = envoy
					}
				}
				owner = { any_pool_leader = { is_same_value = event_target:leader_to_pseudo_clone } }
			}
			event_target:leader_to_pseudo_clone = {
				set_leader_class_code = yes
				set_leader_gender_code = yes
				set_owned_leader_count = yes
				set_owned_leader_count_class = yes
			}
			random_list = {
				# 85 = {
				# 	log_if_enabled = { MESSAGE = "\"...and [leader_to_pseudo_clone.GetSubjectPronoun] did not consider changing [leader_to_pseudo_clone.GetPossPronoun] gender identity from [leader_to_pseudo_clone.GetSubjectPronoun]/[leader_to_pseudo_clone.GetObjectPronoun]/[leader_to_pseudo_clone.GetPossPronoun].\"" }
				# 	event_target:leader_to_pseudo_clone = {
				# 		set_leader_flag = gender_and_presentation_not_changed
				# 		clear_pseudo_clone_variables = yes
				#		if = {
				#			limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				#			print_leader_info = yes
				#		}
				# 	}
				# }
				5 = {
					if = {
						limit = { event_target:leader_to_pseudo_clone = { NOT = { gender = indeterminable } } }
						log_if_enabled = { MESSAGE = "\"...[leader_to_pseudo_clone.GetName] chose to identify as nonbinary.\"" }
						pseudo_clone_leader_with_gender_as_saved = {
							NEW_GENDER = indeterminable
							KEY_SUFFIX = "c[leader_to_pseudo_clone.leader_class_code]_g[leader_to_pseudo_clone.leader_gender_code]_cnt[leader_to_pseudo_clone.owned_leader_class_accumulator]_ttl[leader_to_pseudo_clone.owned_leader_accumulator]"
						}
						activate_pseudo_clone_leader = {
							KEY_SUFFIX = "c[leader_to_pseudo_clone.leader_class_code]_g[leader_to_pseudo_clone.leader_gender_code]_cnt[leader_to_pseudo_clone.owned_leader_class_accumulator]_ttl[leader_to_pseudo_clone.owned_leader_accumulator]"
						}
						event_target:leader_to_pseudo_clone = { fire_leader_via_class = yes }
					}
					else = {
						handle_unchanged_gender_identity = yes
					}
				}
				5 = {
					if = {
						limit = { event_target:leader_to_pseudo_clone = { NOT = { gender = female } } }
						log_if_enabled = { MESSAGE = "\"...[leader_to_pseudo_clone.GetName] chose to identify as female.\"" }
						pseudo_clone_leader_with_gender_as_saved = {
							NEW_GENDER = female
							KEY_SUFFIX = "c[leader_to_pseudo_clone.leader_class_code]_g[leader_to_pseudo_clone.leader_gender_code]_cnt[leader_to_pseudo_clone.owned_leader_class_accumulator]_ttl[leader_to_pseudo_clone.owned_leader_accumulator]"
						}
						activate_pseudo_clone_leader = {
							KEY_SUFFIX = "c[leader_to_pseudo_clone.leader_class_code]_g[leader_to_pseudo_clone.leader_gender_code]_cnt[leader_to_pseudo_clone.owned_leader_class_accumulator]_ttl[leader_to_pseudo_clone.owned_leader_accumulator]"
						}
						event_target:leader_to_pseudo_clone = { fire_leader_via_class = yes }
					}
					else = {
						handle_unchanged_gender_identity = yes
					}
				}
				5 = {
					if = {
						limit = { event_target:leader_to_pseudo_clone = { NOT = { gender = male } } }
						log_if_enabled = { MESSAGE = "\"...[leader_to_pseudo_clone.GetName] chose to identify as male.\"" }
						pseudo_clone_leader_with_gender_as_saved = {
							NEW_GENDER = male
							KEY_SUFFIX = "c[leader_to_pseudo_clone.leader_class_code]_g[leader_to_pseudo_clone.leader_gender_code]_cnt[leader_to_pseudo_clone.owned_leader_class_accumulator]_ttl[leader_to_pseudo_clone.owned_leader_accumulator]"
						}
						activate_pseudo_clone_leader = {
							KEY_SUFFIX = "c[leader_to_pseudo_clone.leader_class_code]_g[leader_to_pseudo_clone.leader_gender_code]_cnt[leader_to_pseudo_clone.owned_leader_class_accumulator]_ttl[leader_to_pseudo_clone.owned_leader_accumulator]"
						}
						event_target:leader_to_pseudo_clone = { fire_leader_via_class = yes }
					}
					else = {
						handle_unchanged_gender_identity = yes
					}
				}
			}
		}
	}
}

country_event = {
	id = nonbinary_leaders.2
	is_triggered_only = yes
	hide_window = yes
	fire_only_once = yes
	trigger = { NOT = { has_country_flag = nonbinary_leaders_game_begun } }
	immediate = {
		set_country_flag = nonbinary_leaders_game_begun
	}
}