namespace = nonbinary_leaders

# flag mod as active
event = {
	id = nonbinary_leaders.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = nonbinary_leaders_installed }
	}
	immediate = {
		set_global_flag = nonbinary_leaders_installed
	}
}

# log info about every owned and pool leader
# root = country
country_event = {
	id = nonbinary_leaders.1000
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = "Owned Leaders"
		every_owned_leader = {
			print_leader_info = yes
		}

		log = "Pool Leaders"
		every_pool_leader = {
			print_leader_info = yes
		}
	}
}

# triggered by on_leader_spawned
# root = country
# from = leader
country_event = {
	id = nonbinary_leaders.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = disable_gender_clones_on_leader_spawned } # not if
		any_playable_country = { is_country = prev } # only for playable country types
		# only triggers in presence of the flag or after at least 1 day has passed in order to avoid changing the gender identity of starting rulers
		OR = {
			has_country_flag = nonbinary_leaders_game_begun
			days_passed > 0
		}
		exists = from
		from = {
			NOT = { has_leader_flag = leader_replaced_by_clone } # in case something else already cloned the leader
			should_roll_to_reconsider_gender_identity = yes
		}
		any_pool_leader = { is_same_value = from }
	}
	immediate = {
		from = {
			save_event_target_as = leader_to_clone
			set_timed_leader_flag = {
				flag = clone_should_be_recruitable
				days = 1
			} 
		}
		log_if_enabled = { MESSAGE = "\"nonbinary_leaders.1 detected spawned leader \\[leader_to_clone.GetTitle] \\[leader_to_clone.GetName] of gendered species class \\[leader_to_clone.GetSpeciesClassOrCustom]...\"" }
		log_if_enabled = { MESSAGE = "\"...and [leader_to_clone.GetSubjectPronoun] initially identif[leader_to_clone.GetIesY] as \\[leader_to_clone.GetGender] ([leader_to_clone.GetSubjectPronoun]/[leader_to_clone.GetObjectPronoun]/[leader_to_clone.GetPossPronoun].)\"" }
		random_list = {
			10 = {
				modifier = {
					factor = 8
					NOT = { has_global_flag = nonbinary_leaders_force_all_spawned }
					event_target:leader_to_clone.species = { species_gender = indeterminable }
				}
				log_if_enabled = { MESSAGE = "\"...[leader_to_clone.GetName] chose to identify as nonbinary.\"" }
				clone_leader_with_gender = { GENDER = indeterminable }
			}
			10 = {
				modifier = {
					factor = 8
					NOT = { has_global_flag = nonbinary_leaders_force_all_spawned }
					event_target:leader_to_clone = {
						OR = {
							species = { species_gender = female }
							AND = {
								gender = female
								species = { species_gender = not_set }
							}
						}
					}
				}
				log_if_enabled = { MESSAGE = "\"...[leader_to_clone.GetName] chose to identify as female.\"" }
				clone_leader_with_gender = { GENDER = female }
			}
			10 = {
				modifier = {
					factor = 8
					NOT = { has_global_flag = nonbinary_leaders_force_all_spawned }
					event_target:leader_to_clone = {
						OR = {
							species = { species_gender = male }
							AND = {
								gender = male
								species = { species_gender = not_set }
							}
						}
					}
				}
				log_if_enabled = { MESSAGE = "\"...[leader_to_clone.GetName] chose to identify as male.\"" }
				clone_leader_with_gender = { GENDER = male }
			}
		}
	}
}

# triggered by on_press_begin
# root = country
country_event = {
	id = nonbinary_leaders.2
	is_triggered_only = yes
	hide_window = yes
	fire_only_once = yes
	trigger = { NOT = { has_country_flag = nonbinary_leaders_game_begun } }
	immediate = {
		set_country_flag = nonbinary_leaders_game_begun
	}
}

# toggle tracing
event = {
	id = nonbinary_leaders.3
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { has_global_flag = nonbinary_leaders_enable_tracing }
			remove_global_flag = nonbinary_leaders_enable_tracing
		}
		else = {
			set_global_flag = nonbinary_leaders_enable_tracing
		}
	}
}

# toggle force all leaders to re-evaluate
event = {
	id = nonbinary_leaders.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { has_global_flag = nonbinary_leaders_force_all_spawned }
			remove_global_flag = nonbinary_leaders_force_all_spawned
		}
		else = {
			set_global_flag = nonbinary_leaders_force_all_spawned
		}
	}
}


# triggered by on_game_start_country
# root = country
country_event = {
	id = nonbinary_leaders.10
	is_triggered_only = yes
	title = nonbinary_leaders.10.title
	desc = nonbinary_leaders.10.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_default
	trigger = {
		is_ai = no
		NOT = { has_origin = origin_clone_army }
		owner_species = { species_class_uses_gender = yes }
	}
	option = {
		name = YES
		hidden_effect = {
			ruler = {
				leader_event = {
					id = nonbinary_leaders.11
				}
			}
		}
	}
	option = {
		name = NO
	}
}

# triggered by nonbinary_leaders.10 and .14
# root = leader
leader_event = {
	id = nonbinary_leaders.11
	is_triggered_only = yes
	title = nonbinary_leaders.11.title
	desc = nonbinary_leaders.11.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_default
	option = {
		name = nonbinary_leaders.11.a
		hidden_effect = {
			if = {
				limit = { NOT = { has_leader_flag = gender_indeterminable } }
				set_leader_flag = gender_indeterminable
			}
			if = {
				limit = { has_leader_flag = gender_female }
				remove_leader_flag = gender_female
			}
			if = {
				limit = { has_leader_flag = gender_male }
				remove_leader_flag = gender_male
			}
		}
	}
	option = {
		name = nonbinary_leaders.11.b
		hidden_effect = {
			if = {
				limit = { NOT = { has_leader_flag = gender_female } }
				set_leader_flag = gender_female
			}
			if = {
				limit = { has_leader_flag = gender_indeterminable }
				remove_leader_flag = gender_indeterminable
			}
			if = {
				limit = { has_leader_flag = gender_male }
				remove_leader_flag = gender_male
			}
		}
	}
	option = {
		name = nonbinary_leaders.11.c
		hidden_effect = {
			if = {
				limit = { NOT = { has_leader_flag = gender_male } }
				set_leader_flag = gender_male
			}
			if = {
				limit = { has_leader_flag = gender_female }
				remove_leader_flag = gender_female
			}
			if = {
				limit = { has_leader_flag = gender_indeterminable }
				remove_leader_flag = gender_indeterminable
			}
		}
	}
	after = {
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.12
			}
		}
	}
}

# triggered by nonbinary_leaders.11
# root = leader
leader_event = {
	id = nonbinary_leaders.12
	is_triggered_only = yes
	title = nonbinary_leaders.12.title
	desc = nonbinary_leaders.12.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_default
	immediate = {
		if = {
			limit = { has_gender_presentation_flag = no }
			if = {
				limit = { gender = female }
				set_leader_flag = presents_fem
			}
			else = {
				set_leader_flag = presents_masc
			}
		}
	}
	option = {
		name = nonbinary_leaders.12.a
		hidden_effect = {
			if = {
				limit = { has_leader_flag = presents_masc }
				remove_leader_flag = presents_masc
			}
			if = {
				limit = { NOT = { has_leader_flag = presents_fem } }
				set_leader_flag = presents_fem
			}
		}
	}
	option = {
		name = nonbinary_leaders.12.b
		hidden_effect = {
			if = {
				limit = { has_leader_flag = presents_fem }
				remove_leader_flag = presents_fem
			}
			if = {
				limit = { NOT = { has_leader_flag = presents_masc } }
				set_leader_flag = presents_masc
			}
		}
	}
	after = {
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.14
			}
		}
	}
}

# triggered by nonbinary_leaders.12
# root = leader
leader_event = {
	id = nonbinary_leaders.14
	is_triggered_only = yes
	title = nonbinary_leaders.13.title
	desc = nonbinary_leaders.13.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_default
	option = {
		name = YES
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.15
			}
		}
	}
	option = {
		name = NO
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.11
			}
		}
	}
}

# triggered by nonbinary_leaders.14
leader_event = {
	id = nonbinary_leaders.15
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		save_event_target_as = leader_to_clone
		set_leader_flag = no_change_portrait
		owner = {
			if = {
				limit = { event_target:leader_to_clone = { has_leader_flag = gender_indeterminable } }
				clone_leader_with_gender = { GENDER = indeterminable }
			}
			else_if = {
				limit = { event_target:leader_to_clone = { has_leader_flag = gender_female } }
				clone_leader_with_gender = { GENDER = female }
			}
			else_if = {
				limit = { event_target:leader_to_clone = { has_leader_flag = gender_male } }
				clone_leader_with_gender = { GENDER = male }
			}
			else = {
				event_target:leader_to_clone = {
					switch = {
						trigger = gender
						indeterminable = { owner = { clone_leader_with_gender = { GENDER = indeterminable } } }
						female = { owner = { clone_leader_with_gender = { GENDER = female } } }
						male = { owner = { clone_leader_with_gender = { GENDER = male } } }
						default = {
							log_error = "somehow ruler [This.GetTitle] [This.GetName] ([This.Owner.GetRealName]) had no gender flag and no gender"
						}
					}
				}
			}
			if = {
				limit = { event_target:leader_to_clone = { has_leader_flag = leader_replaced_by_clone } }
				event_target:gender_clone = {
					change_leader_portrait = event_target:leader_to_clone
					set_leader_flag = no_change_portrait # this flag seems to be a secret flag applied by the game exe to prescripted rulers
				}
				assign_leader = event_target:gender_clone
				# event_target:gender_clone = {
				# 	change_leader_portrait = event_target:leader_to_clone
				# 	set_leader_flag = no_change_portrait # this flag seems to be a secret flag applied by the game exe to prescripted rulers
				# }
			}
		}
	}
}

leader_event = {
	id = nonbinary_leaders.16
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		kill_leader = {
			show_notification = no
			fire = yes
		}
	}
}

# test event
country_event = {
	id = nonbinary_leaders.100
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		ruler = { save_global_event_target_as = original_leader }
		clone_leader = {
			target = event_target:original_leader
			gender = indeterminable
			effect = {
				set_name = "Cloned: [original_leader.GetName]"
				set_leader_flag = presents_fem
				# change_leader_portrait = event_target:original_leader
				save_event_target_as = cloned_leader
			}
		}
		create_leader = {
			class = ruler
			gender = indeterminable
			species = event_target:original_leader
			effect = {
				set_name = "Created: [original_leader.GetName]"
				set_skill = event_target:original_leader.trigger:has_skill
				add_experience = event_target:original_leader.trigger:has_experience
				set_age = event_target:original_leader.trigger:leader_age
				set_leader_flag = presents_fem
				# change_leader_portrait = event_target:original_leader
				save_event_target_as = created_leader
			}
		}
		create_saved_leader = {
			key = test_csl
			creator = root
			class = ruler
			species = event_target:original_leader
			gender = indeterminable
			effect = {
				set_name = "Saved: [original_leader.GetName]"
				set_skill = event_target:original_leader.trigger:has_skill
				add_experience = event_target:original_leader.trigger:has_experience
				set_age = event_target:original_leader.trigger:leader_age
				set_leader_flag = presents_fem
				# change_leader_portrait = event_target:original_leader
			}
		}
		activate_saved_leader = {
			key = test_csl
			add_to_owned = yes
			effect = {
				set_leader_flag = presents_fem
				change_leader_portrait = event_target:original_leader
				save_event_target_as = activated_leader
			}
		}

		ruler = { clear_mandate = yes }
		assign_leader = event_target:created_leader
		ruler = { change_leader_portrait = event_target:original_leader }
	}
}