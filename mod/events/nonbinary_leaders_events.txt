namespace = nonbinary_leaders

# log info about every owned and pool leader
# root = country
country_event = {
	id = nonbinary_leaders.1000
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = "Owned Leaders"
		every_owned_leader = {
			print_leader_info = yes
		}

		log = "Pool Leaders"
		every_pool_leader = {
			print_leader_info = yes
		}
	}
}

# triggered by on_leader_spawned
# root = country
# from = leader
country_event = {
	id = nonbinary_leaders.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = { is_country = prev } # only for playable country types
		NOT = { has_country_flag = spawning_renowned_leader } # renowned leaders are intended to be specific genders
		# only triggers in presence of the flag or after at least 1 day has passed in order to avoid changing the gender identity of starting rulers
		OR = {
			has_country_flag = game_started
			days_passed > 0
		}
		exists = from
		from = { should_roll_to_reconsider_gender_identity = yes }
		any_pool_leader = { is_same_value = from }
	}
	immediate = {
		log_if_enabled = { MESSAGE = "\"nonbinary_leaders.1 detected spawned leader [From.GetTitle] [From.GetName] of gendered species class [From.GetSpeciesClassOrCustom]...\"" }
		log_if_enabled = { MESSAGE = "\"...and [From.GetSubjectPronoun] initially identif[From.GetIesY] as [From.GetGender] ([From.GetSubjectPronoun]/[From.GetObjectPronoun]/[From.GetPossPronoun].)\"" }
		random_list = {
			10 = {
				modifier = {
					factor = 8
					from.species = { species_gender = indeterminable }
				}
				modifier = {
					factor = 0
					has_global_flag = nonbinary_leaders_force_all_spawned
					from.species = { species_gender = indeterminable }
				}
				log_if_enabled = { MESSAGE = "\"...[From.GetName] chose to identify as nonbinary.\"" }
				from = {
					set_gender = indeterminable
					randomize_gender_presentation_if_unset = yes
					if = {
						limit = { has_global_flag = nonbinary_leaders_enable_tracing }
						print_leader_info = yes
					}
				}
			}
			10 = {
				modifier = {
					factor = 8
					from = {
						OR = {
							species = { species_gender = female }
							AND = {
								gender = female
								species = { species_gender = not_set }
							}
						}
					}
				}
				modifier = {
					factor = 0
					has_global_flag = nonbinary_leaders_force_all_spawned
					from.species = {
						OR = {
							species_gender = not_set
							species_gender = female
						}
					}
				}
				log_if_enabled = { MESSAGE = "\"...[From.GetName] chose to identify as female.\"" }
				from = {
					set_gender = female
					randomize_gender_presentation_if_unset = yes
					if = {
						limit = { has_global_flag = nonbinary_leaders_enable_tracing }
						print_leader_info = yes
					}
				}
			}
			10 = {
				modifier = {
					factor = 8
					from = {
						OR = {
							species = { species_gender = male }
							AND = {
								gender = male
								species = { species_gender = not_set }
							}
						}
					}
				}
				modifier = {
					factor = 0
					has_global_flag = nonbinary_leaders_force_all_spawned
					from.species = {
						OR = {
							species_gender = not_set
							species_gender = male
						}
					}
				}
				log_if_enabled = { MESSAGE = "\"...[From.GetName] chose to identify as male.\"" }
				from = {
					set_gender = male
					randomize_gender_presentation_if_unset = yes
					if = {
						limit = { has_global_flag = nonbinary_leaders_enable_tracing }
						print_leader_info = yes
					}
				}
			}
		}
	}
}

# toggle tracing
event = {
	id = nonbinary_leaders.3
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { has_global_flag = nonbinary_leaders_enable_tracing }
			remove_global_flag = nonbinary_leaders_enable_tracing
		}
		else = {
			set_global_flag = nonbinary_leaders_enable_tracing
		}
	}
}

# toggle force all leaders to re-evaluate
event = {
	id = nonbinary_leaders.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { has_global_flag = nonbinary_leaders_force_all_spawned }
			remove_global_flag = nonbinary_leaders_force_all_spawned
		}
		else = {
			set_global_flag = nonbinary_leaders_force_all_spawned
		}
	}
}

# triggered by on_game_start_country
# root = country
country_event = {
	id = nonbinary_leaders.10
	is_triggered_only = yes
	title = nonbinary_leaders.10.title
	desc = nonbinary_leaders.10.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_default
	trigger = {
		is_ai = no
		NOT = { has_origin = origin_clone_army }
		owner_species = { species_class_uses_gender = yes }
	}
	option = {
		name = YES
		hidden_effect = {
			ruler = {
				leader_event = {
					id = nonbinary_leaders.11
				}
			}
		}
	}
	option = {
		name = NO
	}
}

# triggered by nonbinary_leaders.10 and .14
# root = leader
leader_event = {
	id = nonbinary_leaders.11
	is_triggered_only = yes
	title = nonbinary_leaders.11.title
	desc = nonbinary_leaders.11.desc
	picture = GFX_evt_unity_symbol
	option = {
		name = nonbinary_leaders.11.a
		hidden_effect = {
			if = {
				limit = { NOT = { has_leader_flag = gender_indeterminable } }
				set_leader_flag = gender_indeterminable
			}
			if = {
				limit = { has_leader_flag = gender_female }
				remove_leader_flag = gender_female
			}
			if = {
				limit = { has_leader_flag = gender_male }
				remove_leader_flag = gender_male
			}
		}
	}
	option = {
		name = nonbinary_leaders.11.b
		hidden_effect = {
			if = {
				limit = { NOT = { has_leader_flag = gender_female } }
				set_leader_flag = gender_female
			}
			if = {
				limit = { has_leader_flag = gender_indeterminable }
				remove_leader_flag = gender_indeterminable
			}
			if = {
				limit = { has_leader_flag = gender_male }
				remove_leader_flag = gender_male
			}
		}
	}
	option = {
		name = nonbinary_leaders.11.c
		hidden_effect = {
			if = {
				limit = { NOT = { has_leader_flag = gender_male } }
				set_leader_flag = gender_male
			}
			if = {
				limit = { has_leader_flag = gender_female }
				remove_leader_flag = gender_female
			}
			if = {
				limit = { has_leader_flag = gender_indeterminable }
				remove_leader_flag = gender_indeterminable
			}
		}
	}
	after = {
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.12
			}
		}
	}
}

# triggered by nonbinary_leaders.11
# root = leader
leader_event = {
	id = nonbinary_leaders.12
	is_triggered_only = yes
	title = nonbinary_leaders.12.title
	desc = nonbinary_leaders.12.desc
	picture = GFX_evt_unity_symbol
	immediate = {
		if = {
			limit = { has_gender_presentation_flag = no }
			if = {
				limit = { gender = female }
				set_leader_flag = presents_fem
			}
			else = {
				set_leader_flag = presents_masc
			}
		}
	}
	option = {
		name = nonbinary_leaders.12.a
		hidden_effect = {
			if = {
				limit = { has_leader_flag = presents_masc }
				remove_leader_flag = presents_masc
			}
			if = {
				limit = { NOT = { has_leader_flag = presents_fem } }
				set_leader_flag = presents_fem
			}
		}
	}
	option = {
		name = nonbinary_leaders.12.b
		hidden_effect = {
			if = {
				limit = { has_leader_flag = presents_fem }
				remove_leader_flag = presents_fem
			}
			if = {
				limit = { NOT = { has_leader_flag = presents_masc } }
				set_leader_flag = presents_masc
			}
		}
	}
	after = {
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.14
			}
		}
	}
}

# triggered by nonbinary_leaders.12
# root = leader
leader_event = {
	id = nonbinary_leaders.14
	is_triggered_only = yes
	title = nonbinary_leaders.13.title
	desc = nonbinary_leaders.13.desc
	picture = GFX_evt_unity_symbol
	option = {
		name = YES
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.15
			}
		}
	}
	option = {
		name = NO
		hidden_effect = {
			leader_event = {
				id = nonbinary_leaders.11
			}
		}
	}
}

# triggered by nonbinary_leaders.14
leader_event = {
	id = nonbinary_leaders.15
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		owner = {
			clone_leader = {
				target = prev
				effect = { save_event_target_as = cloned_leader }
			}
		}
		switch = {
			trigger = has_leader_flag
			gender_indeterminable = { set_gender = indeterminable }
			gender_female = { set_gender = female }
			gender_male = { set_gender = male }
			default = {
				log_error = "somehow ruler [This.GetTitle] [This.GetName] ([This.Owner.GetRealName]) had no gender flag - gender was NOT changed"
			}
		}
		change_leader_portrait = event_target:cloned_leader
		event_target:cloned_leader = { kill_leader = { show_notification = no } }
	}
}