# requires leader scope
print_leader_info = {
	save_event_target_as = compare_target
	log = "\\[This.GetTitle] \\[This.GetName], \\[This.Species.GetName], age \\[This.GetAge] (\\[This.GetSubjectPronoun]/\\[This.GetObjectPronoun]/\\[This.GetPossPronoun])"
	switch = {
		trigger = gender
		male = { log = "...is male" }
		female = { log = "...is female" }
		indeterminable = { log = "...is nonbinary/neither female nor male (indeterminable)" }
		default = { log = "...is an unknown gender" }
	}
	if = {
		limit = { exists = owner }
		owner = { log = "...belongs to country \\[This.Owner.GetRealName]" }
	}
	switch = {
		trigger = leader_class
		ruler = {
			log = "...is a ruler"
			switch = {
				trigger = pre_ruler_leader_class
				ruler = { log = "...was previously a ruler - how the heck did that happen?" }
				governor = { log = "...was previously a governor" }
				scientist = { log = "...was previously a scientist" }
				admiral = { log = "...was previously an admiral" }
				general = { log = "...was previously a general" }
				envoy = { log = "...was previously an envoy" }
				default = { log = "...was previously an unknown class" }
			}
			log = "...uses regnal name \\[This.GetRegnalName]"
			if = {
				limit = {
					owner = {
						exists = heir
						heir = { is_same_value = event_target:compare_target }
					}
				}
				log = "...is the heir in an imperial government"
			}
		}
		governor = {
			log = "...is a governor"
			if = {
				limit = { exists = sector }
				sector = { log = "...and governs the \\[This.GetName] sector" }
			}
		}
		scientist = {
			log = "...is a scientist"
			switch = {
				trigger = is_researching_area
				physics = { log = "...and is researching physics" }
				society = { log = "...and is researching society"}
				engineering = { log = "...and is researching engineering"}
				default = { log = "...and is NOT researching" }
			}
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
		}
		admiral = {
			log = "...is an admiral"
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
		}
		general = {
			log = "...is a general"
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
			owner = {
				random_owned_army = {
					limit = {
						exists = leader
						leader = { is_same_value = event_target:compare_target }
					}
					log = "...and commands army \\[This.GetName]"
				}
			}
		}
		envoy = { log = "...is an envoy" }
		default = { log = "...is an unknown class" }
	}
	if = {
		limit = { owner = { any_pool_leader = { is_same_value = event_target:compare_target } } }
		log = "...is available to hire (pool)"
	}
	if = {
		limit = { owner = { any_owned_leader = { is_same_value = event_target:compare_target } } }
		log = "...is hired (owned)"
	}
	if = {
		limit = { is_idle = yes }
		log = "...is idle"
	}
	else = {
		log = "...is assigned"
	}
	if = {
		limit = { exists = fleet }
		log = "...has a fleet scope"
	}
	if = {
		limit = { exists = planet }
		log = "...has a planet scope"
	}
	if = {
		limit = { exists = sector }
		log = "...has a sector scope"
	}
	if = {
		limit = { leader_of_faction = yes }
		log = "...is leader of the faction \\[This.GetPopFactionName]"
	}
	if = {
		limit = { exists = pop_faction }
		log = "...has a pop_faction scope"
		pop_faction = { log = "...which is named \\[This.GetName]" }
	}
	if = {
		limit = { is_event_leader = yes }
		log = "...is an event leader"
	}
	else = {
		log = "...is NOT an event leader"
	}
}

# requires country scope
# requires event_target:leader_to_clone, which is the source for the clone's properties
# requires 1 parameter:
#	$NEW_GENDER$ as a gender
clone_leader_with_gender = {
	clone_leader = {
		target = event_target:leader_to_clone
		gender = $NEW_GENDER$
		effect = {
			set_name = event_target:leader_to_clone
			set_leader_flag = gender_reselected
			set_leader_flag_gender = yes
			set_randomized_gender_presentation = yes
			set_skill = event_target:leader_to_clone.trigger:has_skill
			add_experience = event_target:leader_to_clone.trigger:has_experience
			set_age = event_target:leader_to_clone.trigger:leader_age
			recruitable = no
			recruitable = yes
			print_leader_info = yes
		}
	}
}

# requires event_target:leader_to_clone, which is the leaders that _wasn't_ cloned but still needs post-processing
handle_unchanged_gender_identity = {
	if = {
		limit = { has_global_flag = nonbinary_leaders_enable_tracing }
		log = "...\\[leader_to_clone.GetSubjectPronoun] decided to continue identifying as \\[leader_to_clone.GetGender]."
	}
	event_target:leader_to_clone = {
		set_leader_flag = gender_retained
		set_leader_flag_gender = yes
		if = {
			limit = { has_gender_presentation_flag = no }
			set_randomized_gender_presentation = yes
		}
		if = {
			limit = { has_global_flag = nonbinary_leaders_enable_tracing }
			print_leader_info = yes
		}
	}
}

# requires leader scope
fire_leader_via_class = {
	switch = {
		trigger = leader_class
		ruler = {
			if = {
				limit = { is_same_value = owner.heir }
				kill_leader = {
					type = ruler
					heir = yes
					fire = yes
					show_notification = no
				}
			}
			else = {
				kill_leader = {
					type = ruler
					fire = yes
					show_notification = no
				}
			}
		}
		governor = {
			kill_leader = {
				type = governor
				fire = yes
				show_notification = no
			}
		}
		scientist = {
			kill_leader = {
				type = scientist
				fire = yes
				show_notification = no
			}
		}
		admiral = {
			kill_leader = {
				type = admiral
				fire = yes
				show_notification = no
			}
		}
		general = {
			kill_leader = {
				type = general
				fire = yes
				show_notification = no
			}
		}
		envoy = {
			kill_leader = {
				type = envoy
				fire = yes
				show_notification = no
			}
		}
		default = {
			log_error = "unknown class \\[This.GetTitle], trying to fire without a class"
			kill_leader = {
				fire = yes
				show_notification = no
			}
		}
	}
}

# requires leader scope
kill_leader_via_class = {
	switch = {
		trigger = leader_class
		ruler = {
			if = {
				limit = { is_same_value = owner.heir }
				kill_leader = {
					type = ruler
					heir = yes
					show_notification = no
				}
			}
			else = {
				kill_leader = {
					type = ruler
					show_notification = no
				}
			}
		}
		governor = {
			kill_leader = {
				type = governor
				show_notification = no
			}
		}
		scientist = {
			kill_leader = {
				type = scientist
				show_notification = no
			}
		}
		admiral = {
			kill_leader = {
				type = admiral
				show_notification = no
			}
		}
		general = {
			kill_leader = {
				type = general
				show_notification = no
			}
		}
		envoy = {
			kill_leader = {
				type = envoy
				show_notification = no
			}
		}
		default = {
			log_error = "unknown class \\[This.GetTitle], trying to kill without a class"
			kill_leader = { show_notification = no }
		}
	}
}

# requires leader scope
set_leader_flag_gender = {
	switch = {
		trigger = gender
		indeterminable = { set_leader_flag = gender_indeterminable }
		female = { set_leader_flag = gender_female }
		male = { set_leader_flag = gender_male }
		default = { set_leader_flag = gender_unknown }
	}
}

# requires leader scope
set_randomized_gender_presentation = {
	random_list = {
		10 = {
			modifier = {
				factor = 9
				gender = female
			}
			set_leader_flag = presents_fem
			if = {
				limit = { gender = male }
				random_galaxy_planet = { log = "effect set_randomized_gender_presentation wasted some time randomly finding \\[This.GetName] to try and apply the right portrait for \\[Prev.GetName]" }
				change_leader_portrait = THIS
			}
			if = {
				limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				if = {
					limit = { gender = female }
					log = "...\\[This.GetSubjectPronoun] already presented as feminine."
				}
				else = {
					log = "...\\[This.GetSubjectPronoun] now present\\[This.GetSXX] as feminine."
				}
			}
		}
		10 = {
			modifier = {
				factor = 9
				gender = male
			}
			set_leader_flag = presents_masc
			if = {
				limit = { gender = female }
				random_galaxy_planet = { log = "effect set_randomized_gender_presentation wasted some time randomly finding \\[This.GetName] to try and apply the right portrait for \\[Prev.GetName]" }
				change_leader_portrait = THIS
			}
			if = {
				limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				if = {
					limit = { gender = male }
					log = "...\\[This.GetSubjectPronoun] already presented as masculine."
				}
				else = {
					log = "...\\[This.GetSubjectPronoun] now present\\[This.GetSXX] as masculine."
				}
			}
		}
	}
}

# any scope, but you need to escape strings with spaces "\"my string\"" of it will break here
log_if_enabled = {
	if = {
		limit = { has_global_flag = nonbinary_leaders_enable_tracing }
		log = $MESSAGE$
	}
}