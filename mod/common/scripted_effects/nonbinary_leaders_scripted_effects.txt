# requires leader scope
print_leader_info = {
	save_event_target_as = compare_target
	log = "\\[This.GetTitle] \\[This.GetName], \\[This.Species.GetName], age \\[This.GetAge] (\\[This.GetSubjectPronoun]/\\[This.GetObjectPronoun]/\\[This.GetPossPronoun])"
	switch = {
		trigger = gender
		male = { log = "...is male" }
		female = { log = "...is female" }
		indeterminable = { log = "...is nonbinary/neither female nor male (indeterminable)" }
		default = { log = "...is an unknown gender" }
	}
	if = {
		limit = { exists = owner }
		owner = { log = "...belongs to country \\[This.Owner.GetRealName]" }
	}
	switch = {
		trigger = leader_class
		ruler = {
			log = "...is a ruler"
			switch = {
				trigger = pre_ruler_leader_class
				ruler = { log = "...was previously a ruler - how the heck did that happen?" }
				governor = { log = "...was previously a governor" }
				scientist = { log = "...was previously a scientist" }
				admiral = { log = "...was previously an admiral" }
				general = { log = "...was previously a general" }
				envoy = { log = "...was previously an envoy" }
				default = { log = "...was previously an unknown class" }
			}
			log = "...uses regnal name \\[This.GetRegnalName]"
			if = {
				limit = {
					owner = {
						exists = heir
						heir = { is_same_value = event_target:compare_target }
					}
				}
				log = "...is the heir in an imperial government"
			}
		}
		governor = {
			log = "...is a governor"
			if = {
				limit = { exists = sector }
				sector = { log = "...and governs the \\[This.GetName] sector" }
			}
		}
		scientist = {
			log = "...is a scientist"
			switch = {
				trigger = is_researching_area
				physics = { log = "...and is researching physics" }
				society = { log = "...and is researching society"}
				engineering = { log = "...and is researching engineering"}
				default = { log = "...and is NOT researching" }
			}
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
		}
		admiral = {
			log = "...is an admiral"
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
		}
		general = {
			log = "...is a general"
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
			owner = {
				random_owned_army = {
					limit = {
						exists = leader
						leader = { is_same_value = event_target:compare_target }
					}
					log = "...and commands army \\[This.GetName]"
				}
			}
		}
		envoy = { log = "...is an envoy" }
		default = { log = "...is an unknown class" }
	}
	if = {
		limit = { owner = { any_pool_leader = { is_same_value = event_target:compare_target } } }
		log = "...is available to hire (pool)"
	}
	if = {
		limit = { owner = { any_owned_leader = { is_same_value = event_target:compare_target } } }
		log = "...is hired (owned)"
	}
	if = {
		limit = { is_idle = yes }
		log = "...is idle"
	}
	else = {
		log = "...is assigned"
	}
	if = {
		limit = { exists = fleet }
		log = "...has a fleet scope"
	}
	if = {
		limit = { exists = planet }
		log = "...has a planet scope"
	}
	if = {
		limit = { exists = sector }
		log = "...has a sector scope"
	}
	if = {
		limit = { leader_of_faction = yes }
		log = "...is leader of the faction \\[This.GetPopFactionName]"
	}
	if = {
		limit = { exists = pop_faction }
		log = "...has a pop_faction scope"
		pop_faction = { log = "...which is named \\[This.GetName]" }
	}
	if = {
		limit = { is_event_leader = yes }
		log = "...is an event leader"
	}
	else = {
		log = "...is NOT an event leader"
	}
}

# requires country scope
# requires event_target:leader_to_clone, which is the source for the clone's properties
# requires 1 parameter:
#	$GENDER$ as a gender
clone_leader_with_gender = {
	event_target:leader_to_clone = { 
		if = {
			limit = { gender = $GENDER$ }
			set_randomized_gender_presentation = yes
			if = {
				limit = {
					OR = {
						AND = {
							gender = female
							has_leader_flag = presents_masc
						}
						AND = {
							gender = male
							has_leader_flag = presents_fem
						}
					}
				}
				PREV = {
					set_country_flag = disable_gender_clones_on_leader_spawned
					clone_leader = {
						target = PREV
						effect = {
							set_leader_flag = gender_retained
							if = {
								limit = { event_target:leader_to_clone = { has_leader_flag = presents_fem } }
								set_leader_flag = presents_fem
							}
							else = {
								set_leader_flag = presents_masc
							}
							clone_leader_with_gender_post_process = yes
						}
					}
				}
			}
			else = {
				set_leader_flag = not_cloned
				set_leader_flag_gender = yes
				if = {
					limit = { has_global_flag = nonbinary_leaders_enable_tracing }
					log = "...\\[This.GetName] did not change gender identity or gender presentation, and therefore was not cloned"
					print_leader_info = yes
				}
			}
		}
		else = {
			PREV = {
				set_country_flag = disable_gender_clones_on_leader_spawned
				clone_leader = {
					target = PREV
					gender = $GENDER$
					effect = {
						set_leader_flag = gender_reselected
						set_randomized_gender_presentation = yes
						clone_leader_with_gender_post_process = yes
					}
				}
			}
		}
	}
}

# requires leader scope
# requires event_target:leader_to_clone, which is the source for the clone's properties
clone_leader_with_gender_post_process = {
	# change_leader_portrait = event_target:leader_to_clone # TODO verify this will work
	set_name = event_target:leader_to_clone
	set_leader_flag_gender = yes
	# set_skill = event_target:leader_to_clone.trigger:has_skill
	add_experience = event_target:leader_to_clone.trigger:has_experience
	# set_age = event_target:leader_to_clone.trigger:leader_age
	if = {
		limit = { event_target:leader_to_clone = { has_leader_flag = clone_should_be_recruitable } }
		recruitable = no
		recruitable = yes
	}
	if = {
		limit = { has_global_flag = nonbinary_leaders_enable_tracing }
		print_leader_info = yes
	}
	event_target:leader_to_clone = {
		set_leader_flag = leader_replaced_by_clone # other events may fire before the leader is removed - this is to prevent duplicate cloning
		kill_leader = {
			show_notification = no
			fire = yes
		}
	}
	owner = { remove_country_flag = disable_gender_clones_on_leader_spawned }
}

# requires leader scope
set_leader_flag_gender = {
	switch = {
		trigger = gender
		indeterminable = { set_leader_flag = gender_indeterminable }
		female = { set_leader_flag = gender_female }
		male = { set_leader_flag = gender_male }
		default = { set_leader_flag = gender_unknown }
	}
}

# requires leader scope
set_randomized_gender_presentation = {
	random_list = {
		10 = {
			modifier = {
				factor = 9
				gender = female
			}
			set_leader_flag = presents_fem
			if = {
				limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				if = {
					limit = { gender = female }
					log = "...\\[This.GetSubjectPronoun] already presented as feminine."
				}
				else = {
					log = "...\\[This.GetSubjectPronoun] now present\\[This.GetSXX] as feminine."
				}
			}
		}
		10 = {
			modifier = {
				factor = 9
				gender = male
			}
			set_leader_flag = presents_masc
			if = {
				limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				if = {
					limit = { gender = male }
					log = "...\\[This.GetSubjectPronoun] already presented as masculine."
				}
				else = {
					log = "...\\[This.GetSubjectPronoun] now present\\[This.GetSXX] as masculine."
				}
			}
		}
	}
}

# any scope, but you need to escape strings with spaces "\"my string\"" of it will break here
log_if_enabled = {
	if = {
		limit = { has_global_flag = nonbinary_leaders_enable_tracing }
		log = $MESSAGE$
	}
}