# requires leader scope
print_leader_info = {
	optimize_memory
	save_event_target_as = compare_target
	log = "\\[This.GetTitle] \\[This.GetName], \\[This.Species.GetName], age \\[This.GetAge] (\\[This.GetSubjectPronoun]/\\[This.GetObjectPronoun]/\\[This.GetPossPronoun])"
	switch = {
		trigger = gender
		male = { log = "...is male" }
		female = { log = "...is female" }
		indeterminable = { log = "...is nonbinary/neither female nor male (indeterminable)" }
		default = { log = "...is an unknown gender" }
	}
	if = {
		limit = { exists = owner }
		owner = { log = "...belongs to country \\[This.Owner.GetRealName]" }
	}
	switch = {
		trigger = leader_class
		ruler = {
			log = "...is a ruler"
			switch = {
				trigger = pre_ruler_leader_class
				ruler = { log = "...was previously a ruler - how the heck did that happen?" }
				governor = { log = "...was previously a governor" }
				scientist = { log = "...was previously a scientist" }
				admiral = { log = "...was previously an admiral" }
				general = { log = "...was previously a general" }
				envoy = { log = "...was previously an envoy" }
				default = { log = "...was previously an unknown class" }
			}
			log = "...uses regnal name \\[This.GetRegnalName]"
			if = {
				limit = {
					owner = {
						exists = heir
						heir = { is_same_value = event_target:compare_target }
					}
				}
				log = "...is the heir in an imperial government"
			}
		}
		governor = {
			log = "...is a governor"
			if = {
				limit = { exists = sector }
				sector = { log = "...and governs the \\[This.GetName] sector" }
			}
		}
		scientist = {
			log = "...is a scientist"
			switch = {
				trigger = is_researching_area
				physics = { log = "...and is researching physics" }
				society = { log = "...and is researching society"}
				engineering = { log = "...and is researching engineering"}
				default = { log = "...and is NOT researching" }
			}
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
		}
		admiral = {
			log = "...is an admiral"
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
		}
		general = {
			log = "...is a general"
			if = {
				limit = { exists = fleet }
				fleet = { log = "...and commands fleet \\[This.GetName]" }
			}
			owner = {
				random_owned_army = {
					limit = {
						exists = leader
						leader = { is_same_value = event_target:compare_target }
					}
					log = "...and commands army \\[This.GetName]"
				}
			}
		}
		envoy = { log = "...is an envoy" }
		default = { log = "...is an unknown class" }
	}
	if = {
		limit = { owner = { any_pool_leader = { is_same_value = event_target:compare_target } } }
		log = "...is available to hire (pool)"
	}
	if = {
		limit = { owner = { any_owned_leader = { is_same_value = event_target:compare_target } } }
		log = "...is hired (owned)"
	}
	if = {
		limit = { is_idle = yes }
		log = "...is idle"
	}
	else = {
		log = "...is assigned"
	}
	if = {
		limit = { exists = fleet }
		log = "...has a fleet scope"
	}
	if = {
		limit = { exists = planet }
		log = "...has a planet scope"
	}
	if = {
		limit = { exists = sector }
		log = "...has a sector scope"
	}
	if = {
		limit = { leader_of_faction = yes }
		log = "...is leader of the faction \\[This.GetPopFactionName]"
	}
	if = {
		limit = { exists = pop_faction }
		log = "...has a pop_faction scope"
		pop_faction = { log = "...which is named \\[This.GetName]" }
	}
	if = {
		limit = { is_event_leader = yes }
		log = "...is an event leader"
	}
	else = {
		log = "...is NOT an event leader"
	}
}

# requires country scope
# requires event_target:leader_to_clone, which is the source for the clone's properties
# requires 1 parameter:
#	$GENDER$ as a gender
clone_leader_with_gender = {
	optimize_memory
	event_target:leader_to_clone = {
		if = {
			limit = { gender = $GENDER$ }
			log = "...\\[This.GetName] is already $GENDER$ - randomizing gender presentation"
			set_randomized_gender_presentation = yes
			if = {
				limit = {
					OR = {
						AND = {
							gender = female
							has_leader_flag = presents_masc
						}
						AND = {
							gender = male
							has_leader_flag = presents_fem
						}
					}
				}
				prev = {
					set_country_flag = disable_gender_clones_on_leader_spawned
					clone_leader = {
						target = prev
						effect = {
							set_timed_leader_flag = {
								flag = gender_retained
								days = 1
							}
							if = {
								limit = { event_target:leader_to_clone = { has_leader_flag = presents_fem } }
								set_leader_flag = presents_fem
							}
							else_if = {
								limit = { event_target:leader_to_clone = { has_leader_flag = presents_masc } }
								set_leader_flag = presents_masc
							}
							clone_leader_with_gender_post_process = yes
						}
					}
				}
			}
			else = {
				set_timed_leader_flag = {
					flag = not_cloned
					days = 1
				}
				set_leader_flag_gender = yes
				if = {
					limit = { has_global_flag = nonbinary_leaders_enable_tracing }
					log = "...\\[This.GetName] did not change gender identity or gender presentation, and therefore was not cloned"
					print_leader_info = yes
				}
			}
		}
		else = {
			log = "...\\[This.GetName] was not $GENDER$ - cloning in order to change"
			prev = {
				set_country_flag = disable_gender_clones_on_leader_spawned
				clone_leader = {
					target = prev
					effect = {
						save_event_target_as = portrait_holder
					}
				}
				clone_leader = {
					target = prev
					gender = $GENDER$
					effect = {
						set_timed_leader_flag = {
							flag = gender_reselected
							days = 1
						}
						set_randomized_gender_presentation = yes
						clone_leader_with_gender_post_process = yes
						save_event_target_as = gender_clone
					}
				}
				event_target:gender_clone = {
					change_leader_portrait = event_target:portrait_holder
				}
				event_target:portrait_holder = {
					exile_leader_as = exiled_portrait_holder@this # TODO: check a save file to see if this is literal of allows the usage of @
				}
				event_target:leader_to_clone = {
					kill_leader = {
						show_notification = no
						fire = yes
					}
					# or consider exiling this one, then killing it later
				}

				# TODO: consider if last_created_leader has_leader_flag = leader_replaced_by_clone@event_target:leader_to_clone,
				# then try to copy the portrait and _then_ clean up the extra, instead of during the effect = { } block



				# OR - make another clone to hold the portrait? or exile the existing leader (maybe kill after a day)?
			}
		}
	}
}

# requires leader scope
# requires event_target:leader_to_clone, which is the source for the clone's properties
clone_leader_with_gender_post_process = {
	optimize_memory
	# change_leader_portrait = event_target:leader_to_clone # TODO verify this will work
	set_name = event_target:leader_to_clone
	set_leader_flag_gender = yes
	add_experience = event_target:leader_to_clone.trigger:has_experience # doesn't get copied implicitly when cloned
	if = {
		limit = { event_target:leader_to_clone = { has_leader_flag = clone_should_be_recruitable } }
		recruitable = no
		recruitable = yes
	}
	if = {
		limit = { has_global_flag = nonbinary_leaders_enable_tracing }
		print_leader_info = yes
	}
	event_target:leader_to_clone = {
		set_leader_flag = leader_replaced_by_clone # other events may fire before the leader is removed - this is to prevent duplicate cloning
		set_leader_flag = leader_replaced_by_clone@event_target:leader_to_clone
		# kill_leader = {
		# 	show_notification = no
		# 	fire = yes
		# }
	}
	owner = { remove_country_flag = disable_gender_clones_on_leader_spawned }
}

# requires leader scope
set_leader_flag_gender = {
	optimize_memory
	switch = {
		trigger = gender
		indeterminable = { set_leader_flag = gender_indeterminable }
		female = { set_leader_flag = gender_female }
		male = { set_leader_flag = gender_male }
		default = { set_leader_flag = gender_unknown }
	}
}

# requires leader scope
set_randomized_gender_presentation = {
	optimize_memory
	random_list = {
		10 = {
			modifier = {
				factor = 9
				gender = female
			}
			set_leader_flag = presents_fem
			if = {
				limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				if = {
					limit = { gender = female }
					log = "...\\[This.GetSubjectPronoun] already presented as feminine."
				}
				else = {
					log = "...\\[This.GetSubjectPronoun] now present\\[This.GetSXX] as feminine."
				}
			}
		}
		10 = {
			modifier = {
				factor = 9
				gender = male
			}
			set_leader_flag = presents_masc
			if = {
				limit = { has_global_flag = nonbinary_leaders_enable_tracing }
				if = {
					limit = { gender = male }
					log = "...\\[This.GetSubjectPronoun] already presented as masculine."
				}
				else = {
					log = "...\\[This.GetSubjectPronoun] now present\\[This.GetSXX] as masculine."
				}
			}
		}
	}
}

# changes a gender's leader to match the norms for their species (possibly cloning and replacing them)
# this = leader, with new species
# from = species, previous
leader_match_gender_to_species = {
	optimize_memory
	if = {
		limit = { leader_species_gender_change_requires_clone = no }
		species = {
			switch = {
				trigger = species_gender
				# if indeterminable, then nothing should change
				female = {
					prev = {
						if = {
							limit = { NOT = { gender = female } }
							set_is_female = yes
						}
					}
				}
				male = {
					prev = {
						if = {
							limit = { NOT = { gender = male } }
							set_is_female = no
						}
					}
				}
				not_set = {
					prev = {
						if = {
							limit = {
								species_class_uses_gender = yes
								NOR = {
									gender = female
									gender = male
								}
							}
							random_list = {
								50 = { set_is_female = yes }
								50 = { set_is_female = no }
							}
						}
					}
				}
			}
		}
	}
	else = {
		save_event_target_as = leader_to_clone
		owner = { save_event_target_as = leader_owner } # must stay an event_target - the game dislikes prev.owner in the switch statement
		species = {
			switch = {
				trigger = species_gender
				indeterminable = { prev = { clone_leader_with_gender = { GENDER = indeterminable } } }
				female = { prev = { clone_leader_with_gender = { GENDER = female } } }
				male = { prev = { clone_leader_with_gender = { GENDER = male } } }
				not_set = {
					if = {
						limit = { species_class_uses_gender = yes }
						prev = {
							random_list = {
								50 = { clone_leader_with_gender = { GENDER = female } }
								50 = { clone_leader_with_gender = { GENDER = male } }
							}
						}
					}
					else = {
						prev = { clone_leader_with_gender = { GENDER = indeterminable } }
					}
				}
			}
		}
	}
}

# any scope, but you need to escape strings with spaces "\"my string\"" of it will break here
log_if_enabled = {
	optimize_memory
	if = {
		limit = { has_global_flag = nonbinary_leaders_enable_tracing }
		log = $MESSAGE$
	}
}